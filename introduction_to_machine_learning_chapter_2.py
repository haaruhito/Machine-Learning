# -*- coding: utf-8 -*-
"""Introduction_to_Machine_Learning_Chapter_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-4a7hVyNyw_7pDlw1e1xluCXTXsCN7k0

# Introduction to Machine Learning

# Chapter 2  How do neurons work?

## Exercise 2.1

w1 = 5

w2 = 4

h = 3

## Exercise 2.2

w1 = -2

w2 = -3

h = -4

## Exercise 2.3

w1 = -2

w2 = -3

w3 = -4

h = -1

## Example 2.1
"""

import numpy as np

class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)

x = np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w = np.array([[2],
              [2]])
h = np.array([3])

formalNeuron1 = FormalNeuronLayer(w,h)
y = formalNeuron1.forward(x)
print(x)
print(y)

"""## Exercise 2.4"""

import numpy as np

class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)

x = np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w = np.array([[1,-1],
              [1,-1]]) 

h =np.array([0.5,-1.5])
u = np.array([1, 1])
g = np.array([1.5])
 

formalNeuron1 = FormalNeuronLayer(w,h)
formalNeuron2 = FormalNeuronLayer(u,g)
y = formalNeuron1.forward(x)
print(y)
z = formalNeuron2.forward(y)
print(z)

"""## Exercise 2.5"""

import numpy as np

class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)

x = np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w =np.array([[1,-1],
              [1,-2]])
h =np.array([0,-3])
u = np.array([[1,1],
              [1,-1]])
g = np.array([1,0])


formalNeuron1 = FormalNeuronLayer(w,h)
formalNeuron2 = FormalNeuronLayer(u,g)
y = formalNeuron1.forward(x)
print(y)
z = formalNeuron2.forward(y)
print(z)

"""## Exercise 2.6"""

import numpy as np

class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)

x =np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w =np.array([[-3,2],
              [2,-3]])
h =np.array([1,1])
u = np.array([1,1])
              
g = np.array([0.5])

formalNeuron1 = FormalNeuronLayer(w,h)
formalNeuron2 = FormalNeuronLayer(u,g)
y = formalNeuron1.forward(x)
print(y)
z = formalNeuron2.forward(y)
print(z)

"""## Example 2.2"""

import numpy as np

class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Step:
  def forward(self, x):
    y = x > 0
    return y.astype(np.int)

x = np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w = np.array([[2],
              [2]])
b = np.array([-3])

affine1 = Affine(w,b)
step1 = Step()

p = affine1.forward(x)
y = step1.forward(p)
print(x)
print(y)

"""## Exercise 2.6"""

import numpy as np


class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

    
  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Step:
  def forward(self, x):
    y = x > 0
    return y.astype(np.int)

x =np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w =np.array([[1,-1],
              [1,-1]])
b =np.array([-0.5,1.5])
u = np.array([1, 1])
c = np.array([-1.5])

affine1 = Affine(w,b)
step1 = Step()

p = affine1.forward(x)
y = step1.forward(p)
print(x)
print(y)

affine2 = Affine(u,c)
step2 = Step()

p = affine2.forward(y)
z = step2.forward(p)
print (z)

"""## Exercise 2.7"""

import numpy as np

class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

    
  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Step:
  def forward(self, x):
    y = x > 0
    return y.astype(np.int)

x =np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w =np.array([[1,-1],
              [1,-2]])
b =np.array([-0,3])
u = np.array([[1,1],
              [1,-1]])
c = np.array([-1,0])

affine1 = Affine(w,b)
step1 = Step()

p = affine1.forward(x)
y = step1.forward(p)

print(y)



affine2 = Affine(u,c)
step2 = Step()

p = affine2.forward(y)
z = step2.forward(p)

print(z)

"""## 【Note】Dot-product and Hadamard product"""

import numpy as np

a = np.array([[1,2,3],
              [4,5,6]])

b = np.array([[2,2,2],
              [3,3,3]])

print(a*b) # Hadamard product

print(np.dot(a, b.T)) # Dot-product

"""## Sigmoid function"""

import numpy as np
import matplotlib.pyplot as plt

x = np.arange(-10, 10, 0.1)
y = 1 / (1 + np.exp(-x))

plt.plot(x, y)
plt.show()

"""## Example 2.3"""

import numpy as np

class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Sigmoid:
  def forward(self, x):
    y = 1 / (1 + np.exp(-x))
    return y

x = np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w = np.array([[2],
              [2]])
b = np.array([-3])

affine1 = Affine(w,b)
sigmoid1 = Sigmoid()

p = affine1.forward(x)
y = sigmoid1.forward(p)
print(x)
print(y)

"""## Exercise 2.8"""

import numpy as np


class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Sigmoid:
  def forward(self, x):
    y = 1 / (1 + np.exp(-x))
    return y


x =np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w =np.array([[1,-1],
              [1,-1]])
b =np.array([-0.5,1.5])
u = np.array([1, 1])
c = np.array([-1.5])

affine1 = Affine(w,b)
sigmoid1 = Sigmoid()

p = affine1.forward(x)
y = sigmoid1.forward(p)
print(x)
print(y)

affine2 = Affine(u,c)
sigmoid2 = Sigmoid()

p = affine2.forward(y)
z = sigmoid2.forward(p)
print(z)

"""## Exercise 2.9"""

import numpy as np


class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Sigmoid:
  def forward(self, x):
    y = 1 / (1 + np.exp(-x))
    return y

x =np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w =np.array([[1,-1],
              [1,-2]])
b =np.array([-0,3])
u = np.array([[1,1],
              [1,-1]])
c = np.array([-1,0])

affine1 = Affine(w,b)
sigmoid1 = Sigmoid()

p = affine1.forward(x)
y = sigmoid1.forward(p)
print(x)
print(y)

affine2 = Affine(u,c)
sigmoid2 = Sigmoid()

p = affine2.forward(y)
z = sigmoid2.forward(p)
print(z)

"""## 【Note】Meshgrid"""

X, Y = np.meshgrid(np.arange(0, 1, 0.1),
                   np.arange(0, 1, 0.1))

print(X)
print(Y)

"""## Example 2.4"""

import numpy as np
import matplotlib.pyplot as plt

class Affine:
  def __init__(self, w, b):
    self.w = w    # weight
    self.b = b    # bias

  def forward(self, x):
    p = np.dot(x, self.w) + self.b
    return p

class Sigmoid:
  def forward(self, x):
    y = 1 / (1 + np.exp(-x))
    return y

x = np.array([[0,0],
              [0,1],
              [1,0],
              [1,1]])
w = np.array([[2, -2],
              [2, -2]])
b = np.array([-1, 3])
u = np.array([[2],
              [2]])
c = np.array([-3])

affine1 = Affine(w,b)
sigmoid1 = Sigmoid()
affine2 = Affine(u,c)
sigmoid2 = Sigmoid()

X, Y = np.meshgrid(np.arange(0, 1, 0.1),
                   np.arange(0, 1, 0.1))
x = np.hstack((X.reshape(100,1), Y.reshape(100,1)))
p = affine1.forward(x)
y = sigmoid1.forward(p)
q = affine2.forward(y)
z = sigmoid2.forward(q)
Z = z.reshape((10,10))
np.set_printoptions(precision=2)
print(Z)

fig = plt.figure()
ax = fig.gca(projection='3d')
ax.plot_surface(X, Y, Z)
plt.show()

"""## Exercise 2.10"""



"""## Exercise 2.11

(1) c

(2) b

(3) d

(4) a

## Exercise 2.12
(1)w1=  2  w2= 4   h=6√5

(2)w1= -4   w2= -3   h=12.5

(3)w1= 4   w2= 3   h=-12.5

## Exercise 2.13

w11 = 1 w12 = 1  y1 =0

w21 = -1 w22 = -2 y2 = -3

v1 =  1 v2 = 1   h3 =1
"""
