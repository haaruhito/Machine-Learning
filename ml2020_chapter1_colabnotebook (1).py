# -*- coding: utf-8 -*-
"""ML2020_Chapter1_ColabNotebook.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15-UmwSnCpCs6gPwgVRXlA4Lf5to3G0f6

# Introduction to Machine Learning
---

# Chapter 1 Perceptron

## Exercise 1.1

| x1 | x2 | Sigma wx | y |
|----|----|----|----|
|0   |0   |   0 |   0 |
|0   |1   |  3  |  1  |
|1   |0   | 2   |  0  |
|1   |1   |   5 |  1  |

## Exercise 1.2

| x1 | x2 | Sigma wx | y |
|----|----|----|----|
|0   |0   |  0  |   1 |
|0   |1   |  -5  |  0  |
|1   |0   |  -3  |   1 |
|1   |1   |   -8 |  0  |

## Exercise 1.3

| x1 | x2 | Sigma wx | y |
|----|----|----|----|
|0   |0   | 0   |0   |
|0   |1   | 2   |1   |
|1   |0   | 1   |0   |
|1   |1   | 3   |1   |

weight for x1 =　1

weight for x2 = 2

threshold = 1

## Exercise 1.4


| x1 | x2 | x3 | Sigma wx | y |
|----|----|----|----|----|
|0   |0   |0   |  0  |  0  |
|0   |0   |1   |  1  | 0   |
|0   |1   |0   |   3 |  1  |
|0   |1   |1   |  4  | 1   |
|1   |0   |0   | 2   | 0   |
|1   |0   |1   |  3  | 1   |
|1   |1   |0   |   5 |   1 |
|1   |1   |1   |  6  |   1 |

## Exercise 1.5


| x1 | x2 | x3 | Sigma wx | y |
|----|----|----|----|----|
|0   |0   |0   |  0  |  1  |
|0   |0   |1   |  -1  |  0  |
|0   |1   |0   |  -3  |   0 |
|0   |1   |1   |  -4  |   0 |
|1   |0   |0   |  2  | 1   |
|1   |0   |1   | 1   | 1   |
|1   |1   |0   |  -1  |  0  |
|1   |1   |1   |  -2  | 0   |

## Exercise 1.6


| x1 | x2 | x3 | Sigma wx | y |
|----|----|----|----|----|
|0   |0   |0   |   0 |0   |
|0   |0   |1   |  3  |1   |
|0   |1   |0   |  -2  |0   |
|0   |1   |1   |  1  |0   |
|1   |0   |0   | 5   |1   |
|1   |0   |1   |  8  |1   |
|1   |1   |0   |  3  |1   |
|1   |1   |1   |  6  |1   |

weight for x1 = 5

weight for x2 = -2

weight for x3 =3

threshold = 2

## Example 1.2
"""

import numpy as np

x = np.array([1, 0, 1])
w = np.array([2, 3, -1])
np.dot(x, w.T)

import numpy as np

x = np.array([1, 0, 1])
w = np.array([[2], [3], [-1]])
np.dot(x, w)

"""## Example 1.3"""

a = 3
b = 2
print(a > b)

a = 2
b = 3
print(a > b)

"""## Exercise 1.7"""

import numpy as np

x = np.array([3, 5, 1, 6])
w = np.array([2, 7, 1, 2])


np.dot(x, w)

np.dot(x, w.T)

np.dot(x.T, w)

np.dot(x.T, w.T)

"""## Exercise 1.8"""

import numpy as np

a =5
b =3
x =np.array([3, 5, 1, 6])
w =np.array([2, 7, 1, 2])
print(a>b)
print(b>a)
print(x>a)
print(x>w)

"""## Example 1.4"""

import numpy as np

x = np.array([1, 1, 0])
w = np.array([0.5, 1.0, 0.5])
h = 1

def formal_neuron(x, w, h):

    p = np.dot(x, w)
    y = p > h
    #cast from  boolean to integer
    return y.astype(np.int)

y = formal_neuron(x, w.T, h)
print(y)

"""## Exercise 1.9"""

import numpy as np

x =x = np.array([[0,0,0],
              [0,0,1],
              [0,1,0],
              [0,1,1],
              [1,0,0],
              [1,0,1],
              [1,1,0],
              [1,1,1]])
w =np.array([2, -1, 3])
h =1

def formal_neuron(x, w, h):

    p = np.dot(x, w)
    y = p > h
    #cast from boolean to integer
    return y.astype(np.int)

y = formal_neuron(x, w.T, h)
print(y)

"""## Example 1.5"""

import numpy as np

x = np.array([[0,0,0],
              [0,0,1],
              [0,1,0],
              [0,1,1],
              [1,0,0],
              [1,0,1],
              [1,1,0],
              [1,1,1]])
w = np.array([0.5, 1.0, 0.5])
h = 1

def formal_neuron(x, w, h):

    p = np.dot(x, w)
    y = p > h
    #cast from boolean to integer
    return y.astype(np.int)

y = formal_neuron(x, w.T, h)
print(y)

"""## Exercise 1.10"""

import numpy as np
x=np.array([[1,0,1],
            [0,1,0],
            [1,1,1]])
w=np.array([0.6, -1.5, 1.0])
h=1.0

def formal_neuron(x, w, h):

    p = np.dot(x, w)
    y = p > h
    #cast from boolean to integer
    return y.astype(np.int)

y = formal_neuron(x, w.T, h)
print(y)

"""## Example 1.6"""

import numpy as np

x=np.array([[0,0,0],
            [0,0,1],
            [0,1,0],
            [0,1,1],
            [1,0,0],
            [1,0,1],
            [1,1,0],
            [1,1,1]])
w = np.array([[0.5, 0.0],
              [1.0, 0.5],
              [0.5, 1.0]])
h = np.array([0.5, 1.0])

def formal_neuron(x, w, h):
  p = np.dot(x, w)
  y = p > h
  #convert boolean to integer
  return y.astype(np.int)
  
y = formal_neuron(x, w, h)
print(y)

"""## Exercise 1.12"""

import numpy as np
x=np.array([[1,0,1],
            [0,1,0],
            [1,1,1],
            [0,1,1]])
w=np.array([[2,-1,3],
            [0,4,1],
            [-4,2,-2]])
h=np.array([2,0,1])

def formal_neuron(x, w, h):
  p = np.dot(x, w)
  y = p > h
  #convert boolean to integer
  return y.astype(np.int)
  
y = formal_neuron(x, w, h)
print(y)

"""## Exercise1.13"""

import numpy as np
x=np.array([[0,1,1,1],
            [0,1,0,0],
            [1,1,0,0]])
            
w=np.array([[-2,0,2,2],
            [-1,2,1,-1],
            [4,-3,1,0],
            [1,1,0,-3]])

h=np.array([1,0,0,2])

def formal_neuron(x, w, h):
  p = np.dot(x, w)
  y = p > h
  #convert boolean to integer
  return y.astype(np.int)
  
y = formal_neuron(x, w, h)
print(y)

"""## Example 1.7"""

import numpy as np

class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)

x = np.array([[0,0,0],
              [0,0,1],
              [0,1,0],
              [0,1,1],
              [1,0,0],
              [1,0,1],
              [1,1,0],
              [1,1,1]])
w = np.array([[0.5, 0.0],
              [1.0, 0.5],
              [0.5, 1.0]])
h = np.array([0.5, 1.0])

formalNeuron = FormalNeuronLayer(w,h)
y = formalNeuron.forward(x)
print(y)

"""## Exercise 1.14"""

import numpy as np
class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)
x=np.array([[0,1,1,1],
            [0,1,0,0],
            [1,1,0,0]])
w=np.array([[-2,0,2,2],
            [-1,2,1,-1],
            [4,-3,1,0],
            [1,1,0,-3]])

h=np.array([1,0,0,2])

formalNeuron = FormalNeuronLayer(w,h)
y = formalNeuron.forward(x)
print(y)

"""## Example 1.8"""

import numpy as np

class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)

x = np.array([[0,0,0],
              [0,0,1],
              [0,1,0],
              [0,1,1],
              [1,0,0],
              [1,0,1],
              [1,1,0],
              [1,1,1]])
w = np.array([[0.5, 1.0, 1.0],
              [1.0, 0.5, 0.5],
              [0.5, 1.0, 0.0]])
h = np.array([0.5, 1.5, 1.0])
u = np.array([[1.0, 0.5],
              [0.5, 0.0],
              [0.0, 1.0]])
g = np.array([1.0, 0.0])

formalNeuron1 = FormalNeuronLayer(w,h)
formalNeuron2 = FormalNeuronLayer(u,g)
y = formalNeuron1.forward(x)
print(y)
z = formalNeuron2.forward(y)
print(z)

"""## Exercise 1.15"""

import numpy as np
class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)
x=np.array([[1,1,1],
            [0,1,0],
            [1,0,0],
            [1,0,1]])
w=np.array([[-2,1,0,1],
            [0,1,-2,-1],
            [1,0,1,1]])
h=np.array([2,-1,0,1])

u=np.array([[4,1],
            [2,3],
            [0,1],
            [3,1]])
g=np.array([2,4])
#formalNeuron1 = FormalNeuronLayer(w,h)
formalNeuron2 = FormalNeuronLayer(u,g)
#y = formalNeuron1.forward(x)
#print(y)
z = formalNeuron2.forward(y)
print(z)

"""## Exercise 1.16"""

import numpy as np
class FormalNeuronLayer:
  def __init__(self, w, h):
    self.w = w
    self.h = h
    
  def forward(self, x):
    p = np.dot(x, self.w)
    y = p > self.h
    return y.astype(np.int)
x=np.array([[1,1,1,1],
            [0,1,0,0],
            [0,1,1,0],
            [1,0,0,0],
            [0,0,1,1]])
w=np.array([[3,2,2,0],
            [4,1,5,2],
            [1,0,1,4],
            [0,1,0,1]])
h=np.array([2,6,1,0])

u=np.array([[4,1,4,3],
            [2,3,0,1],
            [0,1,2,4],
            [3,1,1,2]])
g=np.array([1,4,3,5])
formalNeuron2 = FormalNeuronLayer(u,g)
z = formalNeuron2.forward(y)
print(z)